#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 32744 bytes for ChunkPool::allocate
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:78), pid=33008, tid=32396
#
# JRE version: Java(TM) SE Runtime Environment (17.0.8+9) (build 17.0.8+9-LTS-211)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.8+9-LTS-211, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -Dfile.encoding=UTF-8 --module-path=C:\Users\parid\OneDrive\Documents\NetBeansProjects\Travel Management System\build\classes travel.management.system.Payment

Host: 11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz, 8 cores, 7G,  Windows 11 , 64 bit Build 22621 (10.0.22621.2428)
Time: Tue Nov  7 00:07:51 2023 India Standard Time elapsed time: 0.073553 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00000130b5026b50):  JavaThread "C2 CompilerThread0" daemon [_thread_in_vm, id=32396, stack(0x00000026e9300000,0x00000026e9400000)]

Stack: [0x00000026e9300000,0x00000026e9400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x677d0a]
V  [jvm.dll+0x7d8c54]
V  [jvm.dll+0x7da3fe]
V  [jvm.dll+0x7daa63]
V  [jvm.dll+0x245c5f]
V  [jvm.dll+0xaacc0]
V  [jvm.dll+0xab00c]
V  [jvm.dll+0x1fef39]
V  [jvm.dll+0x6eadfe]
V  [jvm.dll+0x6d1ef2]
V  [jvm.dll+0x1a3cfe]
V  [jvm.dll+0x225f3e]
V  [jvm.dll+0x225215]
V  [jvm.dll+0x78e7bc]
V  [jvm.dll+0x788bba]
